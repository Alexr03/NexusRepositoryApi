/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.26.1-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = SonaTypeNexusRepoApi.Client.SwaggerDateConverter;

namespace SonaTypeNexusRepoApi.Model
{
    /// <summary>
    /// ReadOnlyState
    /// </summary>
    [DataContract]
    public partial class ReadOnlyState :  IEquatable<ReadOnlyState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReadOnlyState" /> class.
        /// </summary>
        /// <param name="systemInitiated">systemInitiated.</param>
        /// <param name="summaryReason">summaryReason.</param>
        /// <param name="frozen">frozen.</param>
        public ReadOnlyState(bool? systemInitiated = default(bool?), string summaryReason = default(string), bool? frozen = default(bool?))
        {
            this.SystemInitiated = systemInitiated;
            this.SummaryReason = summaryReason;
            this.Frozen = frozen;
        }
        
        /// <summary>
        /// Gets or Sets SystemInitiated
        /// </summary>
        [DataMember(Name="systemInitiated", EmitDefaultValue=false)]
        public bool? SystemInitiated { get; set; }

        /// <summary>
        /// Gets or Sets SummaryReason
        /// </summary>
        [DataMember(Name="summaryReason", EmitDefaultValue=false)]
        public string SummaryReason { get; set; }

        /// <summary>
        /// Gets or Sets Frozen
        /// </summary>
        [DataMember(Name="frozen", EmitDefaultValue=false)]
        public bool? Frozen { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReadOnlyState {\n");
            sb.Append("  SystemInitiated: ").Append(SystemInitiated).Append("\n");
            sb.Append("  SummaryReason: ").Append(SummaryReason).Append("\n");
            sb.Append("  Frozen: ").Append(Frozen).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReadOnlyState);
        }

        /// <summary>
        /// Returns true if ReadOnlyState instances are equal
        /// </summary>
        /// <param name="input">Instance of ReadOnlyState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReadOnlyState input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SystemInitiated == input.SystemInitiated ||
                    (this.SystemInitiated != null &&
                    this.SystemInitiated.Equals(input.SystemInitiated))
                ) && 
                (
                    this.SummaryReason == input.SummaryReason ||
                    (this.SummaryReason != null &&
                    this.SummaryReason.Equals(input.SummaryReason))
                ) && 
                (
                    this.Frozen == input.Frozen ||
                    (this.Frozen != null &&
                    this.Frozen.Equals(input.Frozen))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemInitiated != null)
                    hashCode = hashCode * 59 + this.SystemInitiated.GetHashCode();
                if (this.SummaryReason != null)
                    hashCode = hashCode * 59 + this.SummaryReason.GetHashCode();
                if (this.Frozen != null)
                    hashCode = hashCode * 59 + this.Frozen.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

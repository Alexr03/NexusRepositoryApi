/* 
 * Nexus Repository Manager REST API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.26.1-02
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using SonaTypeNexusRepoApi.Client;
using SonaTypeNexusRepoApi.Model;

namespace SonaTypeNexusRepoApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRepositoryManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository (MavenGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepositoryWithHttpInfo (MavenGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository1 (MavenHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository1WithHttpInfo (MavenHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository10 (NugetProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository10WithHttpInfo (NugetProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository11 (NpmGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository11WithHttpInfo (NpmGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository12 (NpmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository12WithHttpInfo (NpmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository13 (NpmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository13WithHttpInfo (NpmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository14 (RubyGemsGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository14WithHttpInfo (RubyGemsGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository15 (RubyGemsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository15WithHttpInfo (RubyGemsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository16 (RubyGemsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository16WithHttpInfo (RubyGemsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository17 (AptHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository17WithHttpInfo (AptHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository18 (AptProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository18WithHttpInfo (AptProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository19 (CocoapodsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository19WithHttpInfo (CocoapodsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository2 (MavenProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository2WithHttpInfo (MavenProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository20 (GolangGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository20WithHttpInfo (GolangGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository21 (GolangProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository21WithHttpInfo (GolangProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository22 (PypiGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository22WithHttpInfo (PypiGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository23 (PypiHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository23WithHttpInfo (PypiHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository24 (PypiProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository24WithHttpInfo (PypiProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository25 (ConanProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository25WithHttpInfo (ConanProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository26 (P2ProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository26WithHttpInfo (P2ProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository27 (RGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository27WithHttpInfo (RGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository28 (RHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository28WithHttpInfo (RHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository29 (RProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository29WithHttpInfo (RProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository3 (RawGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository3WithHttpInfo (RawGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository30 (BowerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository30WithHttpInfo (BowerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository31 (BowerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository31WithHttpInfo (BowerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository32 (BowerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository32WithHttpInfo (BowerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository33 (DockerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository33WithHttpInfo (DockerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository34 (DockerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository34WithHttpInfo (DockerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository35 (DockerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository35WithHttpInfo (DockerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository36 (GitLfsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository36WithHttpInfo (GitLfsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository37 (YumGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository37WithHttpInfo (YumGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository38 (YumHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository38WithHttpInfo (YumHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository39 (YumProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository39WithHttpInfo (YumProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository4 (RawHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository4WithHttpInfo (RawHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository5 (RawProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository5WithHttpInfo (RawProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository6 (HelmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository6WithHttpInfo (HelmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository7 (HelmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository7WithHttpInfo (HelmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository8 (NugetGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository8WithHttpInfo (NugetGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void CreateRepository9 (NugetHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> CreateRepository9WithHttpInfo (NugetHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Delete repository of any format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns></returns>
        void DeleteRepository (string repositoryName);

        /// <summary>
        /// Delete repository of any format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteRepositoryWithHttpInfo (string repositoryName);
        /// <summary>
        /// Disable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns></returns>
        void DisableRepositoryHealthCheck (string repositoryName);

        /// <summary>
        /// Disable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DisableRepositoryHealthCheckWithHttpInfo (string repositoryName);
        /// <summary>
        /// Enable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns></returns>
        void EnableRepositoryHealthCheck (string repositoryName);

        /// <summary>
        /// Enable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> EnableRepositoryHealthCheckWithHttpInfo (string repositoryName);
        /// <summary>
        /// List repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AbstractApiRepository&gt;</returns>
        List<AbstractApiRepository> GetRepositories ();

        /// <summary>
        /// List repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AbstractApiRepository&gt;</returns>
        ApiResponse<List<AbstractApiRepository>> GetRepositoriesWithHttpInfo ();
        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns></returns>
        void InvalidateCache (string repositoryName);

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> InvalidateCacheWithHttpInfo (string repositoryName);
        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns></returns>
        void RebuildIndex (string repositoryName);

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> RebuildIndexWithHttpInfo (string repositoryName);
        /// <summary>
        /// Update Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository (string repositoryName, MavenGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepositoryWithHttpInfo (string repositoryName, MavenGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository1 (string repositoryName, MavenHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository1WithHttpInfo (string repositoryName, MavenHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository10 (string repositoryName, NugetProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository10WithHttpInfo (string repositoryName, NugetProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository11 (string repositoryName, NpmGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository11WithHttpInfo (string repositoryName, NpmGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository12 (string repositoryName, NpmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository12WithHttpInfo (string repositoryName, NpmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository13 (string repositoryName, NpmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository13WithHttpInfo (string repositoryName, NpmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository14 (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository14WithHttpInfo (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository15 (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository15WithHttpInfo (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository16 (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository16WithHttpInfo (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository17 (string repositoryName, AptHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository17WithHttpInfo (string repositoryName, AptHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository18 (string repositoryName, AptProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository18WithHttpInfo (string repositoryName, AptProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository19 (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository19WithHttpInfo (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository2 (string repositoryName, MavenProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository2WithHttpInfo (string repositoryName, MavenProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository20 (string repositoryName, GolangGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository20WithHttpInfo (string repositoryName, GolangGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository21 (string repositoryName, GolangProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository21WithHttpInfo (string repositoryName, GolangProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository22 (string repositoryName, PypiGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository22WithHttpInfo (string repositoryName, PypiGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository23 (string repositoryName, PypiHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository23WithHttpInfo (string repositoryName, PypiHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository24 (string repositoryName, PypiProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository24WithHttpInfo (string repositoryName, PypiProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository25 (string repositoryName, ConanProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository25WithHttpInfo (string repositoryName, ConanProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository26 (string repositoryName, P2ProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository26WithHttpInfo (string repositoryName, P2ProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository27 (string repositoryName, RGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository27WithHttpInfo (string repositoryName, RGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository28 (string repositoryName, RHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository28WithHttpInfo (string repositoryName, RHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository29 (string repositoryName, RProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository29WithHttpInfo (string repositoryName, RProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository3 (string repositoryName, RawGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository3WithHttpInfo (string repositoryName, RawGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository30 (string repositoryName, BowerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository30WithHttpInfo (string repositoryName, BowerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository31 (string repositoryName, BowerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository31WithHttpInfo (string repositoryName, BowerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository32 (string repositoryName, BowerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository32WithHttpInfo (string repositoryName, BowerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository33 (string repositoryName, DockerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository33WithHttpInfo (string repositoryName, DockerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository34 (string repositoryName, DockerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository34WithHttpInfo (string repositoryName, DockerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository35 (string repositoryName, DockerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository35WithHttpInfo (string repositoryName, DockerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository36 (string repositoryName, GitLfsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository36WithHttpInfo (string repositoryName, GitLfsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository37 (string repositoryName, YumGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository37WithHttpInfo (string repositoryName, YumGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository38 (string repositoryName, YumHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository38WithHttpInfo (string repositoryName, YumHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository39 (string repositoryName, YumProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository39WithHttpInfo (string repositoryName, YumProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository4 (string repositoryName, RawHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository4WithHttpInfo (string repositoryName, RawHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository5 (string repositoryName, RawProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository5WithHttpInfo (string repositoryName, RawProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository6 (string repositoryName, HelmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository6WithHttpInfo (string repositoryName, HelmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository7 (string repositoryName, HelmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository7WithHttpInfo (string repositoryName, HelmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository8 (string repositoryName, NugetGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository8WithHttpInfo (string repositoryName, NugetGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        void UpdateRepository9 (string repositoryName, NugetHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> UpdateRepository9WithHttpInfo (string repositoryName, NugetHostedRepositoryApiRequest body = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepositoryAsync (MavenGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepositoryAsyncWithHttpInfo (MavenGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository1Async (MavenHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository1AsyncWithHttpInfo (MavenHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository10Async (NugetProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository10AsyncWithHttpInfo (NugetProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository11Async (NpmGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository11AsyncWithHttpInfo (NpmGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository12Async (NpmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository12AsyncWithHttpInfo (NpmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository13Async (NpmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository13AsyncWithHttpInfo (NpmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository14Async (RubyGemsGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository14AsyncWithHttpInfo (RubyGemsGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository15Async (RubyGemsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository15AsyncWithHttpInfo (RubyGemsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository16Async (RubyGemsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository16AsyncWithHttpInfo (RubyGemsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository17Async (AptHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository17AsyncWithHttpInfo (AptHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository18Async (AptProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository18AsyncWithHttpInfo (AptProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository19Async (CocoapodsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository19AsyncWithHttpInfo (CocoapodsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository2Async (MavenProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository2AsyncWithHttpInfo (MavenProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository20Async (GolangGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository20AsyncWithHttpInfo (GolangGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository21Async (GolangProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository21AsyncWithHttpInfo (GolangProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository22Async (PypiGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository22AsyncWithHttpInfo (PypiGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository23Async (PypiHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository23AsyncWithHttpInfo (PypiHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository24Async (PypiProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository24AsyncWithHttpInfo (PypiProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository25Async (ConanProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository25AsyncWithHttpInfo (ConanProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository26Async (P2ProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository26AsyncWithHttpInfo (P2ProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository27Async (RGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository27AsyncWithHttpInfo (RGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository28Async (RHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository28AsyncWithHttpInfo (RHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository29Async (RProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository29AsyncWithHttpInfo (RProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository3Async (RawGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository3AsyncWithHttpInfo (RawGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository30Async (BowerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository30AsyncWithHttpInfo (BowerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository31Async (BowerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository31AsyncWithHttpInfo (BowerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository32Async (BowerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository32AsyncWithHttpInfo (BowerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository33Async (DockerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository33AsyncWithHttpInfo (DockerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository34Async (DockerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository34AsyncWithHttpInfo (DockerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Docker proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository35Async (DockerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Docker proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository35AsyncWithHttpInfo (DockerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository36Async (GitLfsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository36AsyncWithHttpInfo (GitLfsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository37Async (YumGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository37AsyncWithHttpInfo (YumGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository38Async (YumHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository38AsyncWithHttpInfo (YumHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository39Async (YumProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository39AsyncWithHttpInfo (YumProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository4Async (RawHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository4AsyncWithHttpInfo (RawHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository5Async (RawProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository5AsyncWithHttpInfo (RawProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository6Async (HelmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository6AsyncWithHttpInfo (HelmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Create Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository7Async (HelmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Create Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository7AsyncWithHttpInfo (HelmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository8Async (NugetGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository8AsyncWithHttpInfo (NugetGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Create NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task CreateRepository9Async (NugetHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Create NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository9AsyncWithHttpInfo (NugetHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Delete repository of any format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteRepositoryAsync (string repositoryName);

        /// <summary>
        /// Delete repository of any format
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRepositoryAsyncWithHttpInfo (string repositoryName);
        /// <summary>
        /// Disable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DisableRepositoryHealthCheckAsync (string repositoryName);

        /// <summary>
        /// Disable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DisableRepositoryHealthCheckAsyncWithHttpInfo (string repositoryName);
        /// <summary>
        /// Enable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EnableRepositoryHealthCheckAsync (string repositoryName);

        /// <summary>
        /// Enable repository health check. Proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> EnableRepositoryHealthCheckAsyncWithHttpInfo (string repositoryName);
        /// <summary>
        /// List repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AbstractApiRepository&gt;</returns>
        System.Threading.Tasks.Task<List<AbstractApiRepository>> GetRepositoriesAsync ();

        /// <summary>
        /// List repositories
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AbstractApiRepository&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<AbstractApiRepository>>> GetRepositoriesAsyncWithHttpInfo ();
        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task InvalidateCacheAsync (string repositoryName);

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> InvalidateCacheAsyncWithHttpInfo (string repositoryName);
        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task RebuildIndexAsync (string repositoryName);

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RebuildIndexAsyncWithHttpInfo (string repositoryName);
        /// <summary>
        /// Update Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepositoryAsync (string repositoryName, MavenGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepositoryAsyncWithHttpInfo (string repositoryName, MavenGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository1Async (string repositoryName, MavenHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository1AsyncWithHttpInfo (string repositoryName, MavenHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository10Async (string repositoryName, NugetProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository10AsyncWithHttpInfo (string repositoryName, NugetProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository11Async (string repositoryName, NpmGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository11AsyncWithHttpInfo (string repositoryName, NpmGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository12Async (string repositoryName, NpmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository12AsyncWithHttpInfo (string repositoryName, NpmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository13Async (string repositoryName, NpmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update npm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository13AsyncWithHttpInfo (string repositoryName, NpmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository14Async (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository14AsyncWithHttpInfo (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository15Async (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository15AsyncWithHttpInfo (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository16Async (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update RubyGems proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository16AsyncWithHttpInfo (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository17Async (string repositoryName, AptHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update APT hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository17AsyncWithHttpInfo (string repositoryName, AptHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository18Async (string repositoryName, AptProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update APT proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository18AsyncWithHttpInfo (string repositoryName, AptProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository19Async (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Cocoapods proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository19AsyncWithHttpInfo (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository2Async (string repositoryName, MavenProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Maven proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository2AsyncWithHttpInfo (string repositoryName, MavenProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository20Async (string repositoryName, GolangGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update a Go group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository20AsyncWithHttpInfo (string repositoryName, GolangGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository21Async (string repositoryName, GolangProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update a Go proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository21AsyncWithHttpInfo (string repositoryName, GolangProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository22Async (string repositoryName, PypiGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository22AsyncWithHttpInfo (string repositoryName, PypiGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository23Async (string repositoryName, PypiHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository23AsyncWithHttpInfo (string repositoryName, PypiHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository24Async (string repositoryName, PypiProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update PyPI proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository24AsyncWithHttpInfo (string repositoryName, PypiProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository25Async (string repositoryName, ConanProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Conan proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository25AsyncWithHttpInfo (string repositoryName, ConanProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository26Async (string repositoryName, P2ProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update p2 proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository26AsyncWithHttpInfo (string repositoryName, P2ProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository27Async (string repositoryName, RGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update R group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository27AsyncWithHttpInfo (string repositoryName, RGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository28Async (string repositoryName, RHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update R hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository28AsyncWithHttpInfo (string repositoryName, RHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository29Async (string repositoryName, RProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update R proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository29AsyncWithHttpInfo (string repositoryName, RProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository3Async (string repositoryName, RawGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository3AsyncWithHttpInfo (string repositoryName, RawGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository30Async (string repositoryName, BowerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository30AsyncWithHttpInfo (string repositoryName, BowerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository31Async (string repositoryName, BowerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository31AsyncWithHttpInfo (string repositoryName, BowerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository32Async (string repositoryName, BowerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Bower proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository32AsyncWithHttpInfo (string repositoryName, BowerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository33Async (string repositoryName, DockerGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository33AsyncWithHttpInfo (string repositoryName, DockerGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository34Async (string repositoryName, DockerHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository34AsyncWithHttpInfo (string repositoryName, DockerHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository35Async (string repositoryName, DockerProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Docker group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository35AsyncWithHttpInfo (string repositoryName, DockerProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository36Async (string repositoryName, GitLfsHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Git LFS hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository36AsyncWithHttpInfo (string repositoryName, GitLfsHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository37Async (string repositoryName, YumGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository37AsyncWithHttpInfo (string repositoryName, YumGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository38Async (string repositoryName, YumHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository38AsyncWithHttpInfo (string repositoryName, YumHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository39Async (string repositoryName, YumProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Yum proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository39AsyncWithHttpInfo (string repositoryName, YumProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository4Async (string repositoryName, RawHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository4AsyncWithHttpInfo (string repositoryName, RawHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository5Async (string repositoryName, RawProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update raw proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository5AsyncWithHttpInfo (string repositoryName, RawProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository6Async (string repositoryName, HelmHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update Helm hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository6AsyncWithHttpInfo (string repositoryName, HelmHostedRepositoryApiRequest body = null);
        /// <summary>
        /// Update Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository7Async (string repositoryName, HelmProxyRepositoryApiRequest body = null);

        /// <summary>
        /// Update Helm proxy repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository7AsyncWithHttpInfo (string repositoryName, HelmProxyRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository8Async (string repositoryName, NugetGroupRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet group repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository8AsyncWithHttpInfo (string repositoryName, NugetGroupRepositoryApiRequest body = null);
        /// <summary>
        /// Update NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UpdateRepository9Async (string repositoryName, NugetHostedRepositoryApiRequest body = null);

        /// <summary>
        /// Update NuGet hosted repository
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository9AsyncWithHttpInfo (string repositoryName, NugetHostedRepositoryApiRequest body = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RepositoryManagementApi : IRepositoryManagementApi
    {
        private SonaTypeNexusRepoApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RepositoryManagementApi(String basePath)
        {
            this.Configuration = new SonaTypeNexusRepoApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = SonaTypeNexusRepoApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RepositoryManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RepositoryManagementApi(SonaTypeNexusRepoApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = SonaTypeNexusRepoApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = SonaTypeNexusRepoApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SonaTypeNexusRepoApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SonaTypeNexusRepoApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository (MavenGroupRepositoryApiRequest body = null)
        {
             CreateRepositoryWithHttpInfo(body);
        }

        /// <summary>
        /// Create Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepositoryWithHttpInfo (MavenGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepositoryAsync (MavenGroupRepositoryApiRequest body = null)
        {
             await CreateRepositoryAsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepositoryAsyncWithHttpInfo (MavenGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository1 (MavenHostedRepositoryApiRequest body = null)
        {
             CreateRepository1WithHttpInfo(body);
        }

        /// <summary>
        /// Create Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository1WithHttpInfo (MavenHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository1Async (MavenHostedRepositoryApiRequest body = null)
        {
             await CreateRepository1AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository1AsyncWithHttpInfo (MavenHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository10 (NugetProxyRepositoryApiRequest body = null)
        {
             CreateRepository10WithHttpInfo(body);
        }

        /// <summary>
        /// Create NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository10WithHttpInfo (NugetProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository10Async (NugetProxyRepositoryApiRequest body = null)
        {
             await CreateRepository10AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository10AsyncWithHttpInfo (NugetProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository11 (NpmGroupRepositoryApiRequest body = null)
        {
             CreateRepository11WithHttpInfo(body);
        }

        /// <summary>
        /// Create npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository11WithHttpInfo (NpmGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository11Async (NpmGroupRepositoryApiRequest body = null)
        {
             await CreateRepository11AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository11AsyncWithHttpInfo (NpmGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository12 (NpmHostedRepositoryApiRequest body = null)
        {
             CreateRepository12WithHttpInfo(body);
        }

        /// <summary>
        /// Create npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository12WithHttpInfo (NpmHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository12Async (NpmHostedRepositoryApiRequest body = null)
        {
             await CreateRepository12AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository12AsyncWithHttpInfo (NpmHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository13 (NpmProxyRepositoryApiRequest body = null)
        {
             CreateRepository13WithHttpInfo(body);
        }

        /// <summary>
        /// Create npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository13WithHttpInfo (NpmProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository13Async (NpmProxyRepositoryApiRequest body = null)
        {
             await CreateRepository13AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository13AsyncWithHttpInfo (NpmProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/npm/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository14 (RubyGemsGroupRepositoryApiRequest body = null)
        {
             CreateRepository14WithHttpInfo(body);
        }

        /// <summary>
        /// Create RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository14WithHttpInfo (RubyGemsGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository14", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository14Async (RubyGemsGroupRepositoryApiRequest body = null)
        {
             await CreateRepository14AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository14AsyncWithHttpInfo (RubyGemsGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository14", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository15 (RubyGemsHostedRepositoryApiRequest body = null)
        {
             CreateRepository15WithHttpInfo(body);
        }

        /// <summary>
        /// Create RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository15WithHttpInfo (RubyGemsHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository15", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository15Async (RubyGemsHostedRepositoryApiRequest body = null)
        {
             await CreateRepository15AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository15AsyncWithHttpInfo (RubyGemsHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository15", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository16 (RubyGemsProxyRepositoryApiRequest body = null)
        {
             CreateRepository16WithHttpInfo(body);
        }

        /// <summary>
        /// Create RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository16WithHttpInfo (RubyGemsProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository16", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository16Async (RubyGemsProxyRepositoryApiRequest body = null)
        {
             await CreateRepository16AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository16AsyncWithHttpInfo (RubyGemsProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/rubygems/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository16", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository17 (AptHostedRepositoryApiRequest body = null)
        {
             CreateRepository17WithHttpInfo(body);
        }

        /// <summary>
        /// Create APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository17WithHttpInfo (AptHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/apt/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository17", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository17Async (AptHostedRepositoryApiRequest body = null)
        {
             await CreateRepository17AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository17AsyncWithHttpInfo (AptHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/apt/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository17", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository18 (AptProxyRepositoryApiRequest body = null)
        {
             CreateRepository18WithHttpInfo(body);
        }

        /// <summary>
        /// Create APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository18WithHttpInfo (AptProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/apt/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository18", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository18Async (AptProxyRepositoryApiRequest body = null)
        {
             await CreateRepository18AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository18AsyncWithHttpInfo (AptProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/apt/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository18", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository19 (CocoapodsProxyRepositoryApiRequest body = null)
        {
             CreateRepository19WithHttpInfo(body);
        }

        /// <summary>
        /// Create Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository19WithHttpInfo (CocoapodsProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/cocoapods/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository19", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository19Async (CocoapodsProxyRepositoryApiRequest body = null)
        {
             await CreateRepository19AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository19AsyncWithHttpInfo (CocoapodsProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/cocoapods/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository19", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository2 (MavenProxyRepositoryApiRequest body = null)
        {
             CreateRepository2WithHttpInfo(body);
        }

        /// <summary>
        /// Create Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository2WithHttpInfo (MavenProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository2Async (MavenProxyRepositoryApiRequest body = null)
        {
             await CreateRepository2AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository2AsyncWithHttpInfo (MavenProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/maven/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository20 (GolangGroupRepositoryApiRequest body = null)
        {
             CreateRepository20WithHttpInfo(body);
        }

        /// <summary>
        /// Create a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository20WithHttpInfo (GolangGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/go/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository20", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository20Async (GolangGroupRepositoryApiRequest body = null)
        {
             await CreateRepository20AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository20AsyncWithHttpInfo (GolangGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/go/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository20", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository21 (GolangProxyRepositoryApiRequest body = null)
        {
             CreateRepository21WithHttpInfo(body);
        }

        /// <summary>
        /// Create a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository21WithHttpInfo (GolangProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/go/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository21", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository21Async (GolangProxyRepositoryApiRequest body = null)
        {
             await CreateRepository21AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository21AsyncWithHttpInfo (GolangProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/go/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository21", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository22 (PypiGroupRepositoryApiRequest body = null)
        {
             CreateRepository22WithHttpInfo(body);
        }

        /// <summary>
        /// Create PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository22WithHttpInfo (PypiGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository22", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository22Async (PypiGroupRepositoryApiRequest body = null)
        {
             await CreateRepository22AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository22AsyncWithHttpInfo (PypiGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository22", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository23 (PypiHostedRepositoryApiRequest body = null)
        {
             CreateRepository23WithHttpInfo(body);
        }

        /// <summary>
        /// Create PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository23WithHttpInfo (PypiHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository23", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository23Async (PypiHostedRepositoryApiRequest body = null)
        {
             await CreateRepository23AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository23AsyncWithHttpInfo (PypiHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository23", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository24 (PypiProxyRepositoryApiRequest body = null)
        {
             CreateRepository24WithHttpInfo(body);
        }

        /// <summary>
        /// Create PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository24WithHttpInfo (PypiProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository24", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository24Async (PypiProxyRepositoryApiRequest body = null)
        {
             await CreateRepository24AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository24AsyncWithHttpInfo (PypiProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/pypi/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository24", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository25 (ConanProxyRepositoryApiRequest body = null)
        {
             CreateRepository25WithHttpInfo(body);
        }

        /// <summary>
        /// Create Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository25WithHttpInfo (ConanProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/conan/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository25", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository25Async (ConanProxyRepositoryApiRequest body = null)
        {
             await CreateRepository25AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository25AsyncWithHttpInfo (ConanProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/conan/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository25", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository26 (P2ProxyRepositoryApiRequest body = null)
        {
             CreateRepository26WithHttpInfo(body);
        }

        /// <summary>
        /// Create p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository26WithHttpInfo (P2ProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/p2/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository26", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository26Async (P2ProxyRepositoryApiRequest body = null)
        {
             await CreateRepository26AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository26AsyncWithHttpInfo (P2ProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/p2/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository26", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository27 (RGroupRepositoryApiRequest body = null)
        {
             CreateRepository27WithHttpInfo(body);
        }

        /// <summary>
        /// Create R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository27WithHttpInfo (RGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository27", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository27Async (RGroupRepositoryApiRequest body = null)
        {
             await CreateRepository27AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository27AsyncWithHttpInfo (RGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository27", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository28 (RHostedRepositoryApiRequest body = null)
        {
             CreateRepository28WithHttpInfo(body);
        }

        /// <summary>
        /// Create R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository28WithHttpInfo (RHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository28", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository28Async (RHostedRepositoryApiRequest body = null)
        {
             await CreateRepository28AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository28AsyncWithHttpInfo (RHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository28", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository29 (RProxyRepositoryApiRequest body = null)
        {
             CreateRepository29WithHttpInfo(body);
        }

        /// <summary>
        /// Create R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository29WithHttpInfo (RProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository29", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository29Async (RProxyRepositoryApiRequest body = null)
        {
             await CreateRepository29AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository29AsyncWithHttpInfo (RProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/r/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository29", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository3 (RawGroupRepositoryApiRequest body = null)
        {
             CreateRepository3WithHttpInfo(body);
        }

        /// <summary>
        /// Create raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository3WithHttpInfo (RawGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository3Async (RawGroupRepositoryApiRequest body = null)
        {
             await CreateRepository3AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository3AsyncWithHttpInfo (RawGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository30 (BowerGroupRepositoryApiRequest body = null)
        {
             CreateRepository30WithHttpInfo(body);
        }

        /// <summary>
        /// Create Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository30WithHttpInfo (BowerGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository30", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository30Async (BowerGroupRepositoryApiRequest body = null)
        {
             await CreateRepository30AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository30AsyncWithHttpInfo (BowerGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository30", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository31 (BowerHostedRepositoryApiRequest body = null)
        {
             CreateRepository31WithHttpInfo(body);
        }

        /// <summary>
        /// Create Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository31WithHttpInfo (BowerHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository31", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository31Async (BowerHostedRepositoryApiRequest body = null)
        {
             await CreateRepository31AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository31AsyncWithHttpInfo (BowerHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository31", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository32 (BowerProxyRepositoryApiRequest body = null)
        {
             CreateRepository32WithHttpInfo(body);
        }

        /// <summary>
        /// Create Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository32WithHttpInfo (BowerProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository32Async (BowerProxyRepositoryApiRequest body = null)
        {
             await CreateRepository32AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository32AsyncWithHttpInfo (BowerProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/bower/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository33 (DockerGroupRepositoryApiRequest body = null)
        {
             CreateRepository33WithHttpInfo(body);
        }

        /// <summary>
        /// Create Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository33WithHttpInfo (DockerGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository33", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository33Async (DockerGroupRepositoryApiRequest body = null)
        {
             await CreateRepository33AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository33AsyncWithHttpInfo (DockerGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository33", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository34 (DockerHostedRepositoryApiRequest body = null)
        {
             CreateRepository34WithHttpInfo(body);
        }

        /// <summary>
        /// Create Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository34WithHttpInfo (DockerHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository34", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository34Async (DockerHostedRepositoryApiRequest body = null)
        {
             await CreateRepository34AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository34AsyncWithHttpInfo (DockerHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository34", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository35 (DockerProxyRepositoryApiRequest body = null)
        {
             CreateRepository35WithHttpInfo(body);
        }

        /// <summary>
        /// Create Docker proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository35WithHttpInfo (DockerProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository35", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Docker proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository35Async (DockerProxyRepositoryApiRequest body = null)
        {
             await CreateRepository35AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Docker proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository35AsyncWithHttpInfo (DockerProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/docker/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository35", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository36 (GitLfsHostedRepositoryApiRequest body = null)
        {
             CreateRepository36WithHttpInfo(body);
        }

        /// <summary>
        /// Create Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository36WithHttpInfo (GitLfsHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/gitlfs/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository36", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository36Async (GitLfsHostedRepositoryApiRequest body = null)
        {
             await CreateRepository36AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository36AsyncWithHttpInfo (GitLfsHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/gitlfs/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository36", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository37 (YumGroupRepositoryApiRequest body = null)
        {
             CreateRepository37WithHttpInfo(body);
        }

        /// <summary>
        /// Create Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository37WithHttpInfo (YumGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository37", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository37Async (YumGroupRepositoryApiRequest body = null)
        {
             await CreateRepository37AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository37AsyncWithHttpInfo (YumGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository37", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository38 (YumHostedRepositoryApiRequest body = null)
        {
             CreateRepository38WithHttpInfo(body);
        }

        /// <summary>
        /// Create Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository38WithHttpInfo (YumHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository38", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository38Async (YumHostedRepositoryApiRequest body = null)
        {
             await CreateRepository38AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository38AsyncWithHttpInfo (YumHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository38", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository39 (YumProxyRepositoryApiRequest body = null)
        {
             CreateRepository39WithHttpInfo(body);
        }

        /// <summary>
        /// Create Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository39WithHttpInfo (YumProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository39", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository39Async (YumProxyRepositoryApiRequest body = null)
        {
             await CreateRepository39AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository39AsyncWithHttpInfo (YumProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/yum/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository39", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository4 (RawHostedRepositoryApiRequest body = null)
        {
             CreateRepository4WithHttpInfo(body);
        }

        /// <summary>
        /// Create raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository4WithHttpInfo (RawHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository4Async (RawHostedRepositoryApiRequest body = null)
        {
             await CreateRepository4AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository4AsyncWithHttpInfo (RawHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository5 (RawProxyRepositoryApiRequest body = null)
        {
             CreateRepository5WithHttpInfo(body);
        }

        /// <summary>
        /// Create raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository5WithHttpInfo (RawProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository5Async (RawProxyRepositoryApiRequest body = null)
        {
             await CreateRepository5AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository5AsyncWithHttpInfo (RawProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/raw/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository6 (HelmHostedRepositoryApiRequest body = null)
        {
             CreateRepository6WithHttpInfo(body);
        }

        /// <summary>
        /// Create Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository6WithHttpInfo (HelmHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/helm/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository6Async (HelmHostedRepositoryApiRequest body = null)
        {
             await CreateRepository6AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository6AsyncWithHttpInfo (HelmHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/helm/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository7 (HelmProxyRepositoryApiRequest body = null)
        {
             CreateRepository7WithHttpInfo(body);
        }

        /// <summary>
        /// Create Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository7WithHttpInfo (HelmProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/helm/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository7", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository7Async (HelmProxyRepositoryApiRequest body = null)
        {
             await CreateRepository7AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository7AsyncWithHttpInfo (HelmProxyRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/helm/proxy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository7", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository8 (NugetGroupRepositoryApiRequest body = null)
        {
             CreateRepository8WithHttpInfo(body);
        }

        /// <summary>
        /// Create NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository8WithHttpInfo (NugetGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository8Async (NugetGroupRepositoryApiRequest body = null)
        {
             await CreateRepository8AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository8AsyncWithHttpInfo (NugetGroupRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/group";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void CreateRepository9 (NugetHostedRepositoryApiRequest body = null)
        {
             CreateRepository9WithHttpInfo(body);
        }

        /// <summary>
        /// Create NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> CreateRepository9WithHttpInfo (NugetHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository9", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Create NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task CreateRepository9Async (NugetHostedRepositoryApiRequest body = null)
        {
             await CreateRepository9AsyncWithHttpInfo(body);

        }

        /// <summary>
        /// Create NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> CreateRepository9AsyncWithHttpInfo (NugetHostedRepositoryApiRequest body = null)
        {

            var localVarPath = "/v1/repositories/nuget/hosted";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateRepository9", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete repository of any format 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns></returns>
        public void DeleteRepository (string repositoryName)
        {
             DeleteRepositoryWithHttpInfo(repositoryName);
        }

        /// <summary>
        /// Delete repository of any format 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteRepositoryWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->DeleteRepository");

            var localVarPath = "/v1/repositories/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Delete repository of any format 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteRepositoryAsync (string repositoryName)
        {
             await DeleteRepositoryAsyncWithHttpInfo(repositoryName);

        }

        /// <summary>
        /// Delete repository of any format 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to delete</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteRepositoryAsyncWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->DeleteRepository");

            var localVarPath = "/v1/repositories/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns></returns>
        public void DisableRepositoryHealthCheck (string repositoryName)
        {
             DisableRepositoryHealthCheckWithHttpInfo(repositoryName);
        }

        /// <summary>
        /// Disable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DisableRepositoryHealthCheckWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->DisableRepositoryHealthCheck");

            var localVarPath = "/v1/repositories/{repositoryName}/health-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableRepositoryHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Disable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DisableRepositoryHealthCheckAsync (string repositoryName)
        {
             await DisableRepositoryHealthCheckAsyncWithHttpInfo(repositoryName);

        }

        /// <summary>
        /// Disable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to disable Repository Health Check for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DisableRepositoryHealthCheckAsyncWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->DisableRepositoryHealthCheck");

            var localVarPath = "/v1/repositories/{repositoryName}/health-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DisableRepositoryHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns></returns>
        public void EnableRepositoryHealthCheck (string repositoryName)
        {
             EnableRepositoryHealthCheckWithHttpInfo(repositoryName);
        }

        /// <summary>
        /// Enable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> EnableRepositoryHealthCheckWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->EnableRepositoryHealthCheck");

            var localVarPath = "/v1/repositories/{repositoryName}/health-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableRepositoryHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Enable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EnableRepositoryHealthCheckAsync (string repositoryName)
        {
             await EnableRepositoryHealthCheckAsyncWithHttpInfo(repositoryName);

        }

        /// <summary>
        /// Enable repository health check. Proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to enable Repository Health Check for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> EnableRepositoryHealthCheckAsyncWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->EnableRepositoryHealthCheck");

            var localVarPath = "/v1/repositories/{repositoryName}/health-check";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EnableRepositoryHealthCheck", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// List repositories 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;AbstractApiRepository&gt;</returns>
        public List<AbstractApiRepository> GetRepositories ()
        {
             ApiResponse<List<AbstractApiRepository>> localVarResponse = GetRepositoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List repositories 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;AbstractApiRepository&gt;</returns>
        public ApiResponse< List<AbstractApiRepository> > GetRepositoriesWithHttpInfo ()
        {

            var localVarPath = "/v1/repositorySettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbstractApiRepository>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AbstractApiRepository>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbstractApiRepository>)));
        }

        /// <summary>
        /// List repositories 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;AbstractApiRepository&gt;</returns>
        public async System.Threading.Tasks.Task<List<AbstractApiRepository>> GetRepositoriesAsync ()
        {
             ApiResponse<List<AbstractApiRepository>> localVarResponse = await GetRepositoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List repositories 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;AbstractApiRepository&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<AbstractApiRepository>>> GetRepositoriesAsyncWithHttpInfo ()
        {

            var localVarPath = "/v1/repositorySettings";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetRepositories", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<AbstractApiRepository>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<AbstractApiRepository>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<AbstractApiRepository>)));
        }

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns></returns>
        public void InvalidateCache (string repositoryName)
        {
             InvalidateCacheWithHttpInfo(repositoryName);
        }

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> InvalidateCacheWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->InvalidateCache");

            var localVarPath = "/v1/repositories/{repositoryName}/invalidate-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvalidateCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task InvalidateCacheAsync (string repositoryName)
        {
             await InvalidateCacheAsyncWithHttpInfo(repositoryName);

        }

        /// <summary>
        /// Invalidate repository cache. Proxy or group repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to invalidate cache</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> InvalidateCacheAsyncWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->InvalidateCache");

            var localVarPath = "/v1/repositories/{repositoryName}/invalidate-cache";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("InvalidateCache", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns></returns>
        public void RebuildIndex (string repositoryName)
        {
             RebuildIndexWithHttpInfo(repositoryName);
        }

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> RebuildIndexWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->RebuildIndex");

            var localVarPath = "/v1/repositories/{repositoryName}/rebuild-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RebuildIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task RebuildIndexAsync (string repositoryName)
        {
             await RebuildIndexAsyncWithHttpInfo(repositoryName);

        }

        /// <summary>
        /// Schedule a &#39;Repair - Rebuild repository search&#39; Task. Hosted or proxy repositories only. 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to rebuild index</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RebuildIndexAsyncWithHttpInfo (string repositoryName)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->RebuildIndex");

            var localVarPath = "/v1/repositories/{repositoryName}/rebuild-index";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RebuildIndex", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository (string repositoryName, MavenGroupRepositoryApiRequest body = null)
        {
             UpdateRepositoryWithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepositoryWithHttpInfo (string repositoryName, MavenGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository");

            var localVarPath = "/v1/repositories/maven/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepositoryAsync (string repositoryName, MavenGroupRepositoryApiRequest body = null)
        {
             await UpdateRepositoryAsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Maven group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepositoryAsyncWithHttpInfo (string repositoryName, MavenGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository");

            var localVarPath = "/v1/repositories/maven/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository1 (string repositoryName, MavenHostedRepositoryApiRequest body = null)
        {
             UpdateRepository1WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository1WithHttpInfo (string repositoryName, MavenHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository1");

            var localVarPath = "/v1/repositories/maven/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository1Async (string repositoryName, MavenHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository1AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Maven hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository1AsyncWithHttpInfo (string repositoryName, MavenHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository1");

            var localVarPath = "/v1/repositories/maven/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository10 (string repositoryName, NugetProxyRepositoryApiRequest body = null)
        {
             UpdateRepository10WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository10WithHttpInfo (string repositoryName, NugetProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository10");

            var localVarPath = "/v1/repositories/nuget/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository10Async (string repositoryName, NugetProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository10AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update NuGet proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository10AsyncWithHttpInfo (string repositoryName, NugetProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository10");

            var localVarPath = "/v1/repositories/nuget/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository10", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository11 (string repositoryName, NpmGroupRepositoryApiRequest body = null)
        {
             UpdateRepository11WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository11WithHttpInfo (string repositoryName, NpmGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository11");

            var localVarPath = "/v1/repositories/npm/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository11Async (string repositoryName, NpmGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository11AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update npm group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository11AsyncWithHttpInfo (string repositoryName, NpmGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository11");

            var localVarPath = "/v1/repositories/npm/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository11", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository12 (string repositoryName, NpmHostedRepositoryApiRequest body = null)
        {
             UpdateRepository12WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository12WithHttpInfo (string repositoryName, NpmHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository12");

            var localVarPath = "/v1/repositories/npm/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository12Async (string repositoryName, NpmHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository12AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update npm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository12AsyncWithHttpInfo (string repositoryName, NpmHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository12");

            var localVarPath = "/v1/repositories/npm/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository12", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository13 (string repositoryName, NpmProxyRepositoryApiRequest body = null)
        {
             UpdateRepository13WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository13WithHttpInfo (string repositoryName, NpmProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository13");

            var localVarPath = "/v1/repositories/npm/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository13Async (string repositoryName, NpmProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository13AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update npm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository13AsyncWithHttpInfo (string repositoryName, NpmProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository13");

            var localVarPath = "/v1/repositories/npm/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository13", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository14 (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null)
        {
             UpdateRepository14WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository14WithHttpInfo (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository14");

            var localVarPath = "/v1/repositories/rubygems/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository14", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository14Async (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository14AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update RubyGems group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository14AsyncWithHttpInfo (string repositoryName, RubyGemsGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository14");

            var localVarPath = "/v1/repositories/rubygems/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository14", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository15 (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null)
        {
             UpdateRepository15WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository15WithHttpInfo (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository15");

            var localVarPath = "/v1/repositories/rubygems/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository15", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository15Async (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository15AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update RubyGems hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository15AsyncWithHttpInfo (string repositoryName, RubyGemsHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository15");

            var localVarPath = "/v1/repositories/rubygems/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository15", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository16 (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null)
        {
             UpdateRepository16WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository16WithHttpInfo (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository16");

            var localVarPath = "/v1/repositories/rubygems/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository16", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository16Async (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository16AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update RubyGems proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository16AsyncWithHttpInfo (string repositoryName, RubyGemsProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository16");

            var localVarPath = "/v1/repositories/rubygems/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository16", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository17 (string repositoryName, AptHostedRepositoryApiRequest body = null)
        {
             UpdateRepository17WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository17WithHttpInfo (string repositoryName, AptHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository17");

            var localVarPath = "/v1/repositories/apt/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository17", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository17Async (string repositoryName, AptHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository17AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update APT hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository17AsyncWithHttpInfo (string repositoryName, AptHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository17");

            var localVarPath = "/v1/repositories/apt/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository17", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository18 (string repositoryName, AptProxyRepositoryApiRequest body = null)
        {
             UpdateRepository18WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository18WithHttpInfo (string repositoryName, AptProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository18");

            var localVarPath = "/v1/repositories/apt/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository18", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository18Async (string repositoryName, AptProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository18AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update APT proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository18AsyncWithHttpInfo (string repositoryName, AptProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository18");

            var localVarPath = "/v1/repositories/apt/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository18", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository19 (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null)
        {
             UpdateRepository19WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository19WithHttpInfo (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository19");

            var localVarPath = "/v1/repositories/cocoapods/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository19", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository19Async (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository19AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Cocoapods proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository19AsyncWithHttpInfo (string repositoryName, CocoapodsProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository19");

            var localVarPath = "/v1/repositories/cocoapods/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository19", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository2 (string repositoryName, MavenProxyRepositoryApiRequest body = null)
        {
             UpdateRepository2WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository2WithHttpInfo (string repositoryName, MavenProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository2");

            var localVarPath = "/v1/repositories/maven/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository2Async (string repositoryName, MavenProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository2AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Maven proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository2AsyncWithHttpInfo (string repositoryName, MavenProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository2");

            var localVarPath = "/v1/repositories/maven/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository2", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository20 (string repositoryName, GolangGroupRepositoryApiRequest body = null)
        {
             UpdateRepository20WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository20WithHttpInfo (string repositoryName, GolangGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository20");

            var localVarPath = "/v1/repositories/go/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository20", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository20Async (string repositoryName, GolangGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository20AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update a Go group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository20AsyncWithHttpInfo (string repositoryName, GolangGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository20");

            var localVarPath = "/v1/repositories/go/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository20", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository21 (string repositoryName, GolangProxyRepositoryApiRequest body = null)
        {
             UpdateRepository21WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository21WithHttpInfo (string repositoryName, GolangProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository21");

            var localVarPath = "/v1/repositories/go/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository21", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository21Async (string repositoryName, GolangProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository21AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update a Go proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository21AsyncWithHttpInfo (string repositoryName, GolangProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository21");

            var localVarPath = "/v1/repositories/go/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository21", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository22 (string repositoryName, PypiGroupRepositoryApiRequest body = null)
        {
             UpdateRepository22WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository22WithHttpInfo (string repositoryName, PypiGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository22");

            var localVarPath = "/v1/repositories/pypi/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository22", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository22Async (string repositoryName, PypiGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository22AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update PyPI group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository22AsyncWithHttpInfo (string repositoryName, PypiGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository22");

            var localVarPath = "/v1/repositories/pypi/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository22", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository23 (string repositoryName, PypiHostedRepositoryApiRequest body = null)
        {
             UpdateRepository23WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository23WithHttpInfo (string repositoryName, PypiHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository23");

            var localVarPath = "/v1/repositories/pypi/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository23", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository23Async (string repositoryName, PypiHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository23AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update PyPI hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository23AsyncWithHttpInfo (string repositoryName, PypiHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository23");

            var localVarPath = "/v1/repositories/pypi/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository23", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository24 (string repositoryName, PypiProxyRepositoryApiRequest body = null)
        {
             UpdateRepository24WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository24WithHttpInfo (string repositoryName, PypiProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository24");

            var localVarPath = "/v1/repositories/pypi/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository24", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository24Async (string repositoryName, PypiProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository24AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update PyPI proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository24AsyncWithHttpInfo (string repositoryName, PypiProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository24");

            var localVarPath = "/v1/repositories/pypi/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository24", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository25 (string repositoryName, ConanProxyRepositoryApiRequest body = null)
        {
             UpdateRepository25WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository25WithHttpInfo (string repositoryName, ConanProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository25");

            var localVarPath = "/v1/repositories/conan/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository25", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository25Async (string repositoryName, ConanProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository25AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Conan proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository25AsyncWithHttpInfo (string repositoryName, ConanProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository25");

            var localVarPath = "/v1/repositories/conan/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository25", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository26 (string repositoryName, P2ProxyRepositoryApiRequest body = null)
        {
             UpdateRepository26WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository26WithHttpInfo (string repositoryName, P2ProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository26");

            var localVarPath = "/v1/repositories/p2/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository26", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository26Async (string repositoryName, P2ProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository26AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update p2 proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository26AsyncWithHttpInfo (string repositoryName, P2ProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository26");

            var localVarPath = "/v1/repositories/p2/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository26", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository27 (string repositoryName, RGroupRepositoryApiRequest body = null)
        {
             UpdateRepository27WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository27WithHttpInfo (string repositoryName, RGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository27");

            var localVarPath = "/v1/repositories/r/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository27", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository27Async (string repositoryName, RGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository27AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update R group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository27AsyncWithHttpInfo (string repositoryName, RGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository27");

            var localVarPath = "/v1/repositories/r/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository27", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository28 (string repositoryName, RHostedRepositoryApiRequest body = null)
        {
             UpdateRepository28WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository28WithHttpInfo (string repositoryName, RHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository28");

            var localVarPath = "/v1/repositories/r/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository28", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository28Async (string repositoryName, RHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository28AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update R hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository28AsyncWithHttpInfo (string repositoryName, RHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository28");

            var localVarPath = "/v1/repositories/r/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository28", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository29 (string repositoryName, RProxyRepositoryApiRequest body = null)
        {
             UpdateRepository29WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository29WithHttpInfo (string repositoryName, RProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository29");

            var localVarPath = "/v1/repositories/r/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository29", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository29Async (string repositoryName, RProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository29AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update R proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository29AsyncWithHttpInfo (string repositoryName, RProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository29");

            var localVarPath = "/v1/repositories/r/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository29", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository3 (string repositoryName, RawGroupRepositoryApiRequest body = null)
        {
             UpdateRepository3WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository3WithHttpInfo (string repositoryName, RawGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository3");

            var localVarPath = "/v1/repositories/raw/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository3Async (string repositoryName, RawGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository3AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update raw group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository3AsyncWithHttpInfo (string repositoryName, RawGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository3");

            var localVarPath = "/v1/repositories/raw/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository3", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository30 (string repositoryName, BowerGroupRepositoryApiRequest body = null)
        {
             UpdateRepository30WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository30WithHttpInfo (string repositoryName, BowerGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository30");

            var localVarPath = "/v1/repositories/bower/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository30", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository30Async (string repositoryName, BowerGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository30AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Bower group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository30AsyncWithHttpInfo (string repositoryName, BowerGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository30");

            var localVarPath = "/v1/repositories/bower/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository30", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository31 (string repositoryName, BowerHostedRepositoryApiRequest body = null)
        {
             UpdateRepository31WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository31WithHttpInfo (string repositoryName, BowerHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository31");

            var localVarPath = "/v1/repositories/bower/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository31", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository31Async (string repositoryName, BowerHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository31AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Bower hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository31AsyncWithHttpInfo (string repositoryName, BowerHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository31");

            var localVarPath = "/v1/repositories/bower/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository31", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository32 (string repositoryName, BowerProxyRepositoryApiRequest body = null)
        {
             UpdateRepository32WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository32WithHttpInfo (string repositoryName, BowerProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository32");

            var localVarPath = "/v1/repositories/bower/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository32Async (string repositoryName, BowerProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository32AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Bower proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository32AsyncWithHttpInfo (string repositoryName, BowerProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository32");

            var localVarPath = "/v1/repositories/bower/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository32", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository33 (string repositoryName, DockerGroupRepositoryApiRequest body = null)
        {
             UpdateRepository33WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository33WithHttpInfo (string repositoryName, DockerGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository33");

            var localVarPath = "/v1/repositories/docker/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository33", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository33Async (string repositoryName, DockerGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository33AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository33AsyncWithHttpInfo (string repositoryName, DockerGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository33");

            var localVarPath = "/v1/repositories/docker/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository33", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository34 (string repositoryName, DockerHostedRepositoryApiRequest body = null)
        {
             UpdateRepository34WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository34WithHttpInfo (string repositoryName, DockerHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository34");

            var localVarPath = "/v1/repositories/docker/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository34", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository34Async (string repositoryName, DockerHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository34AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Docker hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository34AsyncWithHttpInfo (string repositoryName, DockerHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository34");

            var localVarPath = "/v1/repositories/docker/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository34", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository35 (string repositoryName, DockerProxyRepositoryApiRequest body = null)
        {
             UpdateRepository35WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository35WithHttpInfo (string repositoryName, DockerProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository35");

            var localVarPath = "/v1/repositories/docker/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository35", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository35Async (string repositoryName, DockerProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository35AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Docker group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository35AsyncWithHttpInfo (string repositoryName, DockerProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository35");

            var localVarPath = "/v1/repositories/docker/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository35", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository36 (string repositoryName, GitLfsHostedRepositoryApiRequest body = null)
        {
             UpdateRepository36WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository36WithHttpInfo (string repositoryName, GitLfsHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository36");

            var localVarPath = "/v1/repositories/gitlfs/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository36", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository36Async (string repositoryName, GitLfsHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository36AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Git LFS hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository36AsyncWithHttpInfo (string repositoryName, GitLfsHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository36");

            var localVarPath = "/v1/repositories/gitlfs/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository36", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository37 (string repositoryName, YumGroupRepositoryApiRequest body = null)
        {
             UpdateRepository37WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository37WithHttpInfo (string repositoryName, YumGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository37");

            var localVarPath = "/v1/repositories/yum/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository37", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository37Async (string repositoryName, YumGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository37AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Yum group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository37AsyncWithHttpInfo (string repositoryName, YumGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository37");

            var localVarPath = "/v1/repositories/yum/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository37", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository38 (string repositoryName, YumHostedRepositoryApiRequest body = null)
        {
             UpdateRepository38WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository38WithHttpInfo (string repositoryName, YumHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository38");

            var localVarPath = "/v1/repositories/yum/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository38", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository38Async (string repositoryName, YumHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository38AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Yum hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository38AsyncWithHttpInfo (string repositoryName, YumHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository38");

            var localVarPath = "/v1/repositories/yum/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository38", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository39 (string repositoryName, YumProxyRepositoryApiRequest body = null)
        {
             UpdateRepository39WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository39WithHttpInfo (string repositoryName, YumProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository39");

            var localVarPath = "/v1/repositories/yum/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository39", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository39Async (string repositoryName, YumProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository39AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Yum proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository39AsyncWithHttpInfo (string repositoryName, YumProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository39");

            var localVarPath = "/v1/repositories/yum/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository39", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository4 (string repositoryName, RawHostedRepositoryApiRequest body = null)
        {
             UpdateRepository4WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository4WithHttpInfo (string repositoryName, RawHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository4");

            var localVarPath = "/v1/repositories/raw/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository4Async (string repositoryName, RawHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository4AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update raw hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository4AsyncWithHttpInfo (string repositoryName, RawHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository4");

            var localVarPath = "/v1/repositories/raw/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository4", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository5 (string repositoryName, RawProxyRepositoryApiRequest body = null)
        {
             UpdateRepository5WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository5WithHttpInfo (string repositoryName, RawProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository5");

            var localVarPath = "/v1/repositories/raw/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository5Async (string repositoryName, RawProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository5AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update raw proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository5AsyncWithHttpInfo (string repositoryName, RawProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository5");

            var localVarPath = "/v1/repositories/raw/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository5", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository6 (string repositoryName, HelmHostedRepositoryApiRequest body = null)
        {
             UpdateRepository6WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository6WithHttpInfo (string repositoryName, HelmHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository6");

            var localVarPath = "/v1/repositories/helm/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository6Async (string repositoryName, HelmHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository6AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Helm hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository6AsyncWithHttpInfo (string repositoryName, HelmHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository6");

            var localVarPath = "/v1/repositories/helm/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository6", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository7 (string repositoryName, HelmProxyRepositoryApiRequest body = null)
        {
             UpdateRepository7WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository7WithHttpInfo (string repositoryName, HelmProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository7");

            var localVarPath = "/v1/repositories/helm/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository7", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository7Async (string repositoryName, HelmProxyRepositoryApiRequest body = null)
        {
             await UpdateRepository7AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update Helm proxy repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository7AsyncWithHttpInfo (string repositoryName, HelmProxyRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository7");

            var localVarPath = "/v1/repositories/helm/proxy/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository7", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository8 (string repositoryName, NugetGroupRepositoryApiRequest body = null)
        {
             UpdateRepository8WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository8WithHttpInfo (string repositoryName, NugetGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository8");

            var localVarPath = "/v1/repositories/nuget/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository8Async (string repositoryName, NugetGroupRepositoryApiRequest body = null)
        {
             await UpdateRepository8AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update NuGet group repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository8AsyncWithHttpInfo (string repositoryName, NugetGroupRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository8");

            var localVarPath = "/v1/repositories/nuget/group/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository8", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns></returns>
        public void UpdateRepository9 (string repositoryName, NugetHostedRepositoryApiRequest body = null)
        {
             UpdateRepository9WithHttpInfo(repositoryName, body);
        }

        /// <summary>
        /// Update NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> UpdateRepository9WithHttpInfo (string repositoryName, NugetHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository9");

            var localVarPath = "/v1/repositories/nuget/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository9", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Update NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UpdateRepository9Async (string repositoryName, NugetHostedRepositoryApiRequest body = null)
        {
             await UpdateRepository9AsyncWithHttpInfo(repositoryName, body);

        }

        /// <summary>
        /// Update NuGet hosted repository 
        /// </summary>
        /// <exception cref="SonaTypeNexusRepoApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="repositoryName">Name of the repository to update</param>
        /// <param name="body"> (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateRepository9AsyncWithHttpInfo (string repositoryName, NugetHostedRepositoryApiRequest body = null)
        {
            // verify the required parameter 'repositoryName' is set
            if (repositoryName == null)
                throw new ApiException(400, "Missing required parameter 'repositoryName' when calling RepositoryManagementApi->UpdateRepository9");

            var localVarPath = "/v1/repositories/nuget/hosted/{repositoryName}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (repositoryName != null) localVarPathParams.Add("repositoryName", this.Configuration.ApiClient.ParameterToString(repositoryName)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateRepository9", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

    }
}
